#!/bin/bash

# Script d'installation de l'authentification pour Job Visualization
# Usage: ./install_auth.sh [project_root_directory]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# VÃ©rifier les arguments
PROJECT_ROOT=${1:-$(pwd)}

if [ ! -d "$PROJECT_ROOT" ]; then
    print_error "Le rÃ©pertoire du projet '$PROJECT_ROOT' n'existe pas."
    exit 1
fi

print_message "Installation de l'authentification dans: $PROJECT_ROOT"

# CrÃ©er les rÃ©pertoires nÃ©cessaires
print_step "1. CrÃ©ation des rÃ©pertoires..."
mkdir -p "$PROJECT_ROOT/src/Controller"
mkdir -p "$PROJECT_ROOT/src/Service"
mkdir -p "$PROJECT_ROOT/src/EventListener"
mkdir -p "$PROJECT_ROOT/src/Twig"
mkdir -p "$PROJECT_ROOT/templates/security"
mkdir -p "$PROJECT_ROOT/config/packages"

# Copier les fichiers
print_step "2. Copie des fichiers..."

# ContrÃ´leurs
cp "src/Controller/SecurityController_updated.php" "$PROJECT_ROOT/src/Controller/SecurityController.php"
print_message "âœ“ SecurityController copiÃ©"

# Services
cp "src/Service/AuthenticationService.php" "$PROJECT_ROOT/src/Service/"
print_message "âœ“ AuthenticationService copiÃ©"

# Event Listeners
cp "src/EventListener/AuthenticationListener.php" "$PROJECT_ROOT/src/EventListener/"
print_message "âœ“ AuthenticationListener copiÃ©"

# Twig Extensions
cp "src/Twig/AuthExtension.php" "$PROJECT_ROOT/src/Twig/"
print_message "âœ“ AuthExtension copiÃ©"

# Templates
cp "templates/security/login.html.twig" "$PROJECT_ROOT/templates/security/"
print_message "âœ“ Template de connexion copiÃ©"

# Sauvegarder le base.html.twig existant s'il existe
if [ -f "$PROJECT_ROOT/templates/base.html.twig" ]; then
    cp "$PROJECT_ROOT/templates/base.html.twig" "$PROJECT_ROOT/templates/base.html.twig.backup"
    print_warning "Sauvegarde de base.html.twig crÃ©Ã©e: base.html.twig.backup"
fi

cp "templates/base.html.twig" "$PROJECT_ROOT/templates/"
print_message "âœ“ Template de base mis Ã  jour"

# Configuration
cp "config/packages/security.yaml" "$PROJECT_ROOT/config/packages/"
print_message "âœ“ Configuration de sÃ©curitÃ© copiÃ©e"

cp "config/packages/framework.yaml" "$PROJECT_ROOT/config/packages/"
print_message "âœ“ Configuration du framework copiÃ©e"

# Sauvegarder les routes existantes s'il y en a
if [ -f "$PROJECT_ROOT/config/routes.yaml" ]; then
    cp "$PROJECT_ROOT/config/routes.yaml" "$PROJECT_ROOT/config/routes.yaml.backup"
    print_warning "Sauvegarde de routes.yaml crÃ©Ã©e: routes.yaml.backup"
fi

cp "config/routes.yaml" "$PROJECT_ROOT/config/"
print_message "âœ“ Configuration des routes copiÃ©e"

# Services
if [ -f "$PROJECT_ROOT/config/services.yaml" ]; then
    cp "$PROJECT_ROOT/config/services.yaml" "$PROJECT_ROOT/config/services.yaml.backup"
    print_warning "Sauvegarde de services.yaml crÃ©Ã©e: services.yaml.backup"
fi

cp "config/services.yaml" "$PROJECT_ROOT/config/"
print_message "âœ“ Configuration des services copiÃ©e"

# Fichier d'environnement
if [ ! -f "$PROJECT_ROOT/.env" ]; then
    cp ".env" "$PROJECT_ROOT/"
    print_message "âœ“ Fichier .env crÃ©Ã©"
else
    print_warning "Le fichier .env existe dÃ©jÃ . VÃ©rifiez les variables nÃ©cessaires."
fi

print_step "3. GÃ©nÃ©ration de la clÃ© secrÃ¨te..."
# GÃ©nÃ©rer une clÃ© secrÃ¨te alÃ©atoire
SECRET_KEY=$(openssl rand -hex 32)
if [ -f "$PROJECT_ROOT/.env" ]; then
    sed -i "s/your-secret-key-here-change-this-in-production/$SECRET_KEY/" "$PROJECT_ROOT/.env"
    print_message "âœ“ ClÃ© secrÃ¨te gÃ©nÃ©rÃ©e et configurÃ©e"
fi

print_step "4. Configuration des permissions..."
# Configurer les permissions
chmod +x "$PROJECT_ROOT/bin/console" 2>/dev/null || true
chmod -R 755 "$PROJECT_ROOT/var" 2>/dev/null || true

print_step "5. VÃ©rification de l'installation..."

# VÃ©rifier que tous les fichiers sont en place
FILES_TO_CHECK=(
    "src/Controller/SecurityController.php"
    "src/Service/AuthenticationService.php"
    "src/EventListener/AuthenticationListener.php"
    "src/Twig/AuthExtension.php"
    "templates/security/login.html.twig"
    "templates/base.html.twig"
    "config/packages/security.yaml"
    "config/packages/framework.yaml"
    "config/routes.yaml"
    "config/services.yaml"
)

ALL_GOOD=true
for file in "${FILES_TO_CHECK[@]}"; do
    if [ ! -f "$PROJECT_ROOT/$file" ]; then
        print_error "Fichier manquant: $file"
        ALL_GOOD=false
    fi
done

if [ "$ALL_GOOD" = true ]; then
    print_message "âœ“ Tous les fichiers sont en place"
else
    print_error "Certains fichiers sont manquants. VÃ©rifiez l'installation."
    exit 1
fi

print_step "6. Instructions finales..."

echo ""
print_message "ðŸŽ‰ Installation terminÃ©e avec succÃ¨s!"
echo ""
print_message "IDENTIFIANTS DE CONNEXION:"
echo "  Nom d'utilisateur: Zied Enneifer"
echo "  Mot de passe: 123Wimbee@"
echo ""
print_message "PROCHAINES Ã‰TAPES:"
echo "1. VÃ©rifiez votre configuration Symfony"
echo "2. ExÃ©cutez: php bin/console cache:clear"
echo "3. DÃ©marrez votre serveur: symfony server:start"
echo "4. AccÃ©dez Ã : http://localhost:8000/login"
echo ""
print_warning "SÃ‰CURITÃ‰:"
echo "- Changez les identifiants en production"
echo "- Configurez HTTPS en production"
echo "- VÃ©rifiez les permissions des fichiers"
echo ""
print_message "Pour plus d'informations, consultez la documentation fournie."

